/*
 * Copyright 2020 Ben Philps <bp413@cam.ac.uk>, Andrew Rice <acr31@cam.ac.uk>, J.B. Saville
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.ac.cam.jbs52.linkedlists;

import java.util.NoSuchElementException;

public class LinkList<T> implements OopList<T> {

	private class Node {
		private T value;
		private Node next;

		public Node(T value, Node next) {
			this.value = value;
			this.next = next;
		}

		Node(T value) {
			this.value = value;
			this.next = null;
		}

		@Override
		public String toString() {
			if (next == null) {
				return value.toString();
			}
			return value + "," + next;
		}
	}

	private Node head;

	LinkList() {
		this.head = null;
	}

	public static <T> LinkList<T> create(T[] elements) {
		LinkList<T> obj = new LinkList<T>();
		for (int i = elements.length - 1; i >= 0; i--) {
			obj.addFirst(elements[i]);
		}
		return obj;
	}

	@Override
	public void addFirst(T element) {
		if (head == null) {
			head = new Node(element);
		} else {
			head = new Node(element, head);
		}
	}

	@Override
	public T removeFirst() {
		if (head == null) {
			throw new NoSuchElementException();
		} else {
			T value = head.value;
			head = head.next;
			return value;
		}
	}

	@Override
	public T get(int n) {
		if (head == null || n < 0) {
			throw new NoSuchElementException();
		} else {
			Node current = head;
			while (n-- > 0) {
				current = current.next;
				if (current == null) {
					throw new NoSuchElementException();
				}
			}
			return current.value;
		}
	}

	@Override
	public int length() {
		Node current = head;
		int l = 0;
		while (current != null) {
			current = current.next;
			l++;
		}
		return l;
	}

	@Override
	public String toString() {
		return String.format("[%s]", head == null ? "" : head.toString());
	}

	@Override
	public void reverse() {
		Node current = head;
		while (current != null) {
			Node child = head.next
		}
	}
}
