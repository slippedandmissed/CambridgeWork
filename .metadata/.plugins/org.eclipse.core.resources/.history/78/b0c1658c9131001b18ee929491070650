/*
 * Copyright 2020 Ben Philps <bp413@cam.ac.uk>, Andrew Rice <acr31@cam.ac.uk>, J.B. Saville
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.ac.cam.jbs52.linkedlists;

import static com.google.common.truth.Truth.assertThat;
import static org.junit.Assert.assertThrows;

import java.util.NoSuchElementException;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class LinkListTest {

	@Test
	public void linkList_toStringIsEmptyList_whenListEmpty() {
		// ARRANGE
		LinkList<Integer> empty = new LinkList<Integer>();

		// ACT
		String value = empty.toString();

		// ASSERT
		assertThat(value).isEqualTo("[]");
	}

	@Test
	public void linkList_toStringIsSingleItem_whenListContainsOneItem() {
		// ARRANGE
		LinkList<Integer> list = new LinkList<Integer>();
		list.addFirst(1);

		// ACT
		String value = list.toString();

		// ASSERT
		assertThat(value).isEqualTo("[1]");
	}

	@Test
	public void linkList_toStringIsTwoThenOne_whenListHasOneThenTwoAdded() {
		// ARRANGE
		LinkList<Integer> list = new LinkList<Integer>();
		list.addFirst(1);
		list.addFirst(2);

		// ACT
		String value = list.toString();

		// ASSERT
		assertThat(value).isEqualTo("[2,1]");
	}

	@Test
	public void linkList_toStringIsEmptyList_whenFactoryMethodCalledWithEmptyArray() {
		Integer[] emptyArray = {};
		LinkList<Integer> list = LinkList.create(emptyArray);

		String value = list.toString();

		assertThat(value).isEqualTo("[]");
	}

	@Test
	public void linkList_toStringIsOneThenTwo_whenFactoryMethodCalledWithArrayContainingOneThenTwo() {
		Integer[] array = { 1, 2 };
		LinkList<Integer> list = LinkList.create(array);

		String value = list.toString();

		assertThat(value).isEqualTo("[1,2]");
	}

	@Test
	public void linkList_removeFirstIsTwoThreeFourFive_whenFirstElementIsOneTwoThreeFourFive() {
		Integer[] array = { 1, 2, 3, 4, 5 };
		LinkList<Integer> list = LinkList.create(array);
		list.removeFirst();

		String value = list.toString();

		assertThat(value).isEqualTo("[2,3,4,5]");
	}

	@Test
	public void linkList_removeFirstThrowsNoSuchElementException_whenListIsEmpty() {
		LinkList<Integer> list = new LinkList<Integer>();

		assertThrows(NoSuchElementException.class, () -> {
			list.removeFirst();
		});
	}

	@Test
	public void linkist_getIsFour_whenNIs3AndFourthElementIsFour() {
		Integer[] array = { 1, 2, 3, 4, 5 };
		LinkList<Integer> list = LinkList.create(array);

		int value = list.get(3);

		assertThat(value).isEqualTo(4);
	}

	@Test
	public void linkList_getThrowsNoSuchElementException_whenIndexOutOfBounds() {
		Integer[] array = { 1, 2, 3, 4, 5 };
		LinkList<Integer> list = LinkList.create(array);

		assertThrows(NoSuchElementException.class, () -> {
			list.get(5);
		});
	}

	@Test
	public void linkList_getThrowsNoSuchElementException_whenIndexIsNegativeOne() {
		Integer[] array = { 1, 2, 3, 4, 5 };
		LinkList<Integer> list = LinkList.create(array);

		assertThrows(NoSuchElementException.class, () -> {
			list.get(-1);
		});
	}

	@Test
	public void linkList_lengthIsZero_whenEmptyList() {
		LinkList<Integer> list = new LinkList<Integer>();

		int value = list.length();

		assertThat(value).isEqualTo(0);
	}

	@Test
	public void linkList_lengthIsThree_whenListIsOneTwoThree() {
		Integer[] array = {1,2,3};
		LinkList<Integer> list = LinkList.create(array);

		int value = list.length();

		assertThat(value).isEqualTo(3);
	}
	
	@Test
	public void linkList_reverseIsThreeTwoOne_whenListIsOneTwoThree() {
		Integer[] array = { 1, 2, 3 };
		LinkList<Integer> list = LinkList.create(array);
		list.reverse();

		String value = list.toString();

		assertThat(value).isEqualTo("[3,2,1]");
	}
}
