/*
 * Copyright 2020 Ben Philps <bp413@cam.ac.uk>, J.B. Saville
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.ac.cam.jbs52.chess.pieces;

import static uk.ac.cam.jbs52.chess.PieceColor.BLACK;
import static uk.ac.cam.jbs52.chess.PieceColor.WHITE;
import static uk.ac.cam.jbs52.chess.Position.Rank.SEVEN;
import static uk.ac.cam.jbs52.chess.Position.Rank.TWO;

import java.util.ArrayList;
import java.util.List;

import uk.ac.cam.jbs52.chess.Board;
import uk.ac.cam.jbs52.chess.PieceColor;
import uk.ac.cam.jbs52.chess.Position;

public abstract class Piece {

	public static int KING_VALUE = 10000;

	protected Position position;
	protected final PieceColor pieceColor;
	protected final Board board;
	protected final char name;
	protected final int value;

	public Piece(Position piecePosition, PieceColor pieceColor, Board board) {
		this.position = piecePosition;
		this.pieceColor = pieceColor;
		this.board = board;
	}

	public abstract List<Position> validNextPositions();

	public char icon() {

		boolean colourSwitch = pieceColor == PieceColor.BLACK;

		switch (name) {
		case 'K':
			return colourSwitch ? '♚' : '♔';
		case 'P':
			return colourSwitch ? '♟' : '♙';
		case 'B':
			return colourSwitch ? '♝' : '♗';
		case 'N':
			return colourSwitch ? '♞' : '♘';
		case 'R':
			return colourSwitch ? '♜' : '♖';
		case 'Q':
			return colourSwitch ? '♛' : '♕';
		default:
			return 0;
		}
	}

	public int value() {
		return value;
	}

	protected void computeKnightNextPositions(List<Position> nextPositions) {
		// directions a knight can travel in.
		final int[][] nextPosDeltas = new int[][] { { 1, 2 }, { 1, -2 }, { -1, 2 }, { -1, -2 }, { 2, 1 }, { -2, 1 },
				{ 2, -1 }, { -2, -1 } };

		// iterate through all possible positions, getting any valid next positions
		for (int[] posDeltaPair : nextPosDeltas) {
			position.addPosAtDelta(posDeltaPair[0], posDeltaPair[1], board(), nextPositions);
		}
	}

	protected void computePawnNextPositions(List<Position> nextPositions) {
		// The En passant move is not included.
		// The Promotion is not included.

		/*
		 * pawns can move up 1 if it is a non occupied square. pawns can move (and take)
		 * up 1 and left or right 1 if the square is occupied by an opponent pawns can
		 * move up 2 if they are currently on their home row (pawns cannot go backwards)
		 * 
		 */

		int upDir = (pieceColor == WHITE ? 1 : -1);

		// move up by one
		addPawnPositionIfValid(upDir, 0, false, nextPositions);

		// move up left and right
		addPawnPositionIfValid(upDir, -1, true, nextPositions);
		addPawnPositionIfValid(upDir, 1, true, nextPositions);

		// move up two if on their home row
		if (position().getRank() == (colour() == BLACK ? SEVEN : TWO)) {
			addPawnPositionIfValid(upDir + upDir, 0, false, nextPositions);
		}
	}

	private void addPawnPositionIfValid(int deltaRank, int deltaFile, boolean allowIfOccupiedByOpponent,
			List<Position> nextPositions) {

		Position movePosition = position().getPosAtDelta(deltaRank, deltaFile);

		if (movePosition != null) {
			boolean movePosOccupied = board().positionOccupied(movePosition);
			// the up left and right cases
			if (allowIfOccupiedByOpponent && movePosOccupied && board().atPosition(movePosition).colour() != colour()) {
				nextPositions.add(movePosition);
			}
			// the "up straight ahead" and "up straight ahead two" moves.
			else if (!allowIfOccupiedByOpponent && !movePosOccupied) {
				nextPositions.add(movePosition);
			}
		}
	}

	public Position position() {
		return position;
	}
	
	public String name() {
		return name;
	}

	public void moveTo(Position newPosition) {
		position = newPosition;
	}

	public PieceColor colour() {
		return pieceColor;
	}

	public String toString() {
		return name() + " " + position.toString();
	}

	public Board board() {
		return board;
	}
